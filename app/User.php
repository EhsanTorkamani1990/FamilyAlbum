<?php

namespace App;

use App\Notifications\CustomPasswordReset;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\SoftDeletes;


class User extends Authenticatable
{
   use Notifiable;

    
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];
    protected static function boot()
    {
        parent::boot();    //TODO change the autogenerated stub
        static::created(function ($user) {
            $user->profile()->create([
              'title' =>$user->name,
              

            ]);
        });
    }
    public function comments()
    {
        return $this->hasMany('App\Comment');
    }
    public function commennts()
    {
        return $this->hasMany('App\Commennt');
    }

  
    /*public function commennts()
    {
        return $this->hasMany('App\Comment');
    }*/
    public function albums()
    {
        return $this->hasMany('App\Album');
    }
   
  
    public function photos()
    {
        return $this->hasMany('App\Photo');
    }

   

    public function pools()
    {
        return $this->hasMany('App\Pool')->orderBy('created_at','DESC');
    }

    public function following()
    {
        return $this->belongsToMany('App\Profile');
    }

    public function profile()
    {
        return $this->hasOne('App\Profile');
    }
    public function sendPasswordResetNotification($token)
    {
        //$this->notify(new ResetPasswordNotification($token));
        $this->notify(new CustomPasswordReset($token));
    }
    //image_gallery
    public function imagegallery()
    {
        return $this->hasMany('App\ImageGallery');
    }
  

    public function als()
    {
        return $this->hasMany('App\Al');
    }
   
  
    public function phs()
    {
        return $this->hasMany('App\Ph');
    }


      
    public function likes()
    {
        return $this->hasMany('App\Like');
    }

    public function likes2()
    {
        return $this->hasMany('App\Like');
    }

    public function posts()
    {
        return $this->hasMany('App\Post');
    }
    public function possts()
    {
        return $this->hasMany('App\Posst');
    }

    public function pikos()
    {
        return $this->hasMany('App\Piko');
    }
   /* public function messages(){

        return $this->hasMany('App\Chat');
        
    }*/

    public function for_albums(){

        return $this->hasMany('App\ForAlbum');
        
    }

 

    /*public function dropzones()
    {
        return $this->hasMany('App\Dropzone');
    }*/

    public function messages()
    {
        return $this->hasMany('vendor\munafio\chatify\src\Http\Models\Message');
    }

    public static function getAuthor($id)
    {
        $user = self::find($id);
        return [
            'id'     => $user->id,
            'name'   => $user->name,
            'email'  => $user->email,
            'url'    => '',  // Optional
            'avatar' => 'gravatar',  // Default avatar
            'admin'  => $user->role === 'admin', // bool
        ];
    }

    public function likedPosts()
    {
        return $this->morphedByMany('App\Posst', 'likeable')->whereDeletedAt(null);
    }

    public function devices(){

        return $this->hasMany('App\Device');
        
    }
    
}
